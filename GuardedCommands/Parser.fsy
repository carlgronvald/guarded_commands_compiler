// Author (to extensions): Tobias Thomsen, 11/06 - 21/06
%{
open GuardedCommands.Frontend.AST
%}

%token <int> INT
%token <bool> BOOL
%token <char> CHAR
%token <string> STRING
%token <string> NAME
%token ITYP BTYP CTYP
%token LP LCP LSP RP RCP RSP
%token IF FI DO OD BEGIN END RETURN FUNCTION PROCEDURE ADDR 
%token DEREF
%token COMMA COLON SEMI BAR TO COND APP
%token NEG PLUS PLUSPLUS MINUS MINUSMINUS TIMES AND OR EQ LE GE LT GT NEQ DIV
%token PRINT ASG SKIP ABORT PRINTC
%token EOF
%token HIGH

%left AND OR
%nonassoc NEG PLUSPLUS MINUSMINUS COLON 
%left EQ LE GE LT GT NEQ
%left PLUS MINUS 
%left TIMES DIV COND
%nonassoc ADDR 
%nonassoc DEREF

%start Main Prog

%type <Access> Access
%type <(Exp * Stm list) list> GCList
%type <GuardedCommand> GuardedCommand
%type <Stm list> StmList StmL
%type <Exp list> ExpList ExpL
%type <Stm> Stm
%type <Typ> BasicTyp Typ
%type <Dec> Dec
%type <Dec list> DecL DecList
%type <Program> Main  Prog 
%%

Main:
   Prog EOF                            { $1 }

Prog:
    BEGIN DecList SEMI StmL END        { P($2, $4) }
  | BEGIN StmL END                     { P([], $2) }   

BasicTyp:
    BTYP                              { BTyp }
  | ITYP                              { ITyp }
  | CTYP                              { CTyp }

Typ:
    BasicTyp                            { $1 }
    | DEREF Typ                         { PTyp $2 }

Dec: 
    NAME COLON Typ                        { VarDec($3,$1) }
    | NAME COLON Typ LSP INT RSP          { VarDec((ATyp ($3, Some $5)) ,$1) } 
    | NAME COLON Typ LSP RSP              { VarDec((ATyp ($3, None)) ,$1) }
    | FUNCTION  NAME LP DecL RP COLON Typ EQ Stm {FunDec(Some $7, $2, $4, $9)}
    | PROCEDURE NAME LP DecL RP EQ Stm           {FunDec(None, $2, $4, $7)}


DecL: 
                                      { [] }
   | DecList                          { $1 }

DecList: 
   | Dec                              { [$1] }
   | Dec COMMA DecList                { $1 :: $3 }

Access:
    NAME                                    { AVar $1 }
    | NAME LSP Exp RSP                      { AIndex(AVar $1,$3) }
    | Access DEREF                          { ADeref (Access $1)}

 
Stm:
    PRINT Exp                         { PrintI $2 }
  | PRINTC Exp                        { PrintC $2 }
  | Access ASG Exp                    { Ass($1,$3)}
  | Mass                              { let (a, e) = $1 in Mass (a,e)}
  | NAME LP ExpL RP                   { Call($1, $3 )}
  | SKIP                              { Do (GC []) }
  | ABORT                             { Alt (GC []) } 
  | LCP StmL RCP                      { Block([], $2) }
  | LCP DecL SEMI StmL RCP            { Block($2, $4) } 
  | IF GuardedCommand FI              { Alt $2 }
  | DO GuardedCommand OD              { Do $2  }
  | RETURN Exp                        { Return (Some $2) }
  | RETURN                            { Return None}
  | PLUSPLUS Access                   { Inc($2) }
  | MINUSMINUS Access                 { Dec($2) }

 Mass:
    Access COMMA Access ASG Exp COMMA Exp         {([$1;$3],[$5;$7])}   
  | Access COMMA Mass COMMA Exp                   {let (a,e) = $3 in ($1::a,e@[$5]) }
 

StmL:
                                      { [] } 
  | StmList                           { $1 }    

StmList:
  | Stm                               { [$1] }
  | Stm SEMI StmList                  { $1 :: $3 } 

GuardedCommand:
                                      { GC [] }
  | GCList                            { GC $1 }

GCList:
    Exp TO StmL                       { [($1,$3)]   }
  | Exp TO StmL BAR GCList	   		    { ($1,$3)::$5 }

Exp:
   Access                             {  Access $1 }
  | ADDR Access                       { Addr $2}
  | NAME LP ExpL RP                   { Apply($1, $3) }
  | INT                               { N $1 }
  | BOOL                              { B $1 }       
  | CHAR                              { Cconst $1}
  | LP Exp RP                         { $2 } 
  | MINUS Exp                         { Apply("-", [$2])}
  | NEG Exp                           { Apply("!", [$2])}
  | Exp COND Exp COLON Exp            { Apply("?", [$1; $3; $5])}
  | PLUSPLUS Exp                      { Apply("++", [$2])}
  | MINUSMINUS Exp                    { Apply("--", [$2])}
  | Exp TIMES Exp                     { Apply("*", [$1; $3])}
  | Exp PLUS Exp                      { Apply("+", [$1; $3])}
  | Exp MINUS Exp                     { Apply("-", [$1; $3])}
  | Exp AND Exp                       { Apply("&&", [$1; $3])}
  | Exp OR Exp                        { Apply("||", [$1; $3])}
  | Exp EQ Exp                        { Apply("=", [$1; $3])}
  | Exp LE Exp                        { Apply("<=", [$1; $3])}
  | Exp GE Exp                        { Apply(">=", [$1; $3])}
  | Exp GT Exp                        { Apply(">", [$1; $3])}
  | Exp LT Exp                        { Apply("<", [$1; $3])}
  | Exp NEQ Exp                       { Apply("<>", [$1; $3])}
  | Exp DIV Exp                       { Apply("/", [$1; $3])}

ExpL:
                        {[]}
  | ExpList             {$1}

ExpList:
  | Exp                {[$1]}
  | Exp COMMA ExpList  {$1::$3}
